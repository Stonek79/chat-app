version: '3.9'

services:
    #---------------------------------------------------------------------------
    # Next.js Frontend Приложение
    #---------------------------------------------------------------------------
    next-app:
        container_name: next_app_chat
        build:
            context: .
            dockerfile: Dockerfile
            args:
                - ENV_FILE=.env.docker
                - UPLOADS_PATH=/app/uploads
        environment:
            - DATABASE_URL=${DATABASE_URL} # Эта строка уже была и она правильная для runtime
            - JWT_SECRET=${JWT_SECRET}
            - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
            - NEXT_PUBLIC_SOCKET_URL=${NEXT_PUBLIC_SOCKET_URL}
            - UPLOADS_PATH=/app/uploads
        ports:
            - '${NEXT_APP_PORT:-3000}:3000'
        depends_on:
            redis:
                condition: service_healthy
            socket-server:
                condition: service_started
        networks:
            - app-network
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Socket.IO Сервер (для real-time коммуникаций)
    #---------------------------------------------------------------------------
    socket-server:
        container_name: socket_server_chat
        build:
            context: .
            dockerfile: ./apps/socket-server/Dockerfile
        ports:
            - '${SOCKET_PORT:-3001}:3001'
        depends_on:
            - redis
        volumes:
            - ./apps/socket-server:/app/apps/socket-server
            - ./packages:/app/packages
            - /app/apps/socket-server/node_modules
            - /app/packages/core/node_modules
            - /app/packages/db/node_modules
            - /app/packages/socket-shared/node_modules
            - /app/packages/server-shared/node_modules
        networks:
            - app-network
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Redis Сервис (для кэширования, Pub/Sub для Socket.IO и т.д.)
    #---------------------------------------------------------------------------
    redis:
        container_name: redis_cache_chat
        image: redis:7-alpine
        ports:
            - '${REDIS_EXT_PORT:-6379}:6379'
        command: redis-server --save 60 1 --loglevel warning ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
        volumes:
            - redis_data:/data
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Prisma Studio (опционально, для разработки)
    #---------------------------------------------------------------------------
    prisma-studio:
        container_name: prisma_studio_chat
        build:
            context: .
            dockerfile: Dockerfile.prisma-studio
        ports:
            - '5555:5555'
        env_file:
            - .env.docker
        networks:
            - app-network
        profiles:
            - dev
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Nginx Прокси для раздачи статики
    #---------------------------------------------------------------------------
    nginx:
        container_name: nginx_proxy_chat
        image: nginx:latest
        volumes:
            - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - uploads:/app/uploads
        ports:
            - '${NGINX_PORT:-8080}:80'
        depends_on:
            - next-app
        networks:
            - app-network
        restart: unless-stopped

#---------------------------------------------------------------------------
# Сети и Volumes
#---------------------------------------------------------------------------
networks:
    app-network:
        driver: bridge

volumes:
    redis_data:
        driver: local
    uploads:
        driver: local
