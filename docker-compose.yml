version: '3.9'

services:
    #---------------------------------------------------------------------------
    # Next.js Frontend Приложение
    #---------------------------------------------------------------------------
    next-app:
        container_name: next_app_chat
        build:
            context: .
            dockerfile: Dockerfile
            args:
                ENV_FILE: .env.docker
                # Явно передаем NEXT_PUBLIC_APP_URL в качестве build-аргумента
                NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
                NEXT_PUBLIC_SOCKET_URL: ${NEXT_PUBLIC_SOCKET_URL}
                JWT_SECRET: ${JWT_SECRET}
                DATABASE_URL: ${DATABASE_URL}
                JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
                JWT_MAX_AGE_SECONDS: ${JWT_MAX_AGE_SECONDS}
        environment:
            - JWT_SECRET=${JWT_SECRET}
            - DATABASE_URL=${DATABASE_URL}
            - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
            - NEXT_PUBLIC_SOCKET_URL=${NEXT_PUBLIC_SOCKET_URL}
        ports:
            - '${NEXT_APP_PORT:-3000}:3000'
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            socket-server:
                condition: service_started
            minio:
                condition: service_healthy
        networks:
            - app-network
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Выделенный Socket.IO Сервер
    #---------------------------------------------------------------------------
    socket-server:
        container_name: socket_server_chat
        build:
            context: .
            dockerfile: apps/socket-server/Dockerfile
            args:
                ENV_FILE: .env.docker
        ports:
            - '${SOCKET_SERVER_PORT:-3001}:3001'
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - app-network
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # PostgreSQL База Данных
    #---------------------------------------------------------------------------
    postgres:
        container_name: postgres_db_chat
        image: postgres:16-alpine
        ports:
            - '${POSTGRES_PORT:-5432}:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-user}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
            POSTGRES_DB: ${POSTGRES_DB:-chat_app_db}
        networks:
            - app-network
        healthcheck:
            test:
                ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-chat_app_db}']
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Redis Сервис (для кэширования, Pub/Sub для Socket.IO и т.д.)
    #---------------------------------------------------------------------------
    redis:
        container_name: redis_cache_chat
        image: redis:7-alpine
        ports:
            - '${REDIS_EXT_PORT:-6379}:6379'
        command: redis-server --save 60 1 --loglevel warning ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
        volumes:
            - redis_data:/data
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Prisma Studio (опционально, для разработки)
    #---------------------------------------------------------------------------
    prisma-studio:
        container_name: prisma_studio_chat
        build:
            context: .
            dockerfile: Dockerfile.prisma-studio
        ports:
            - '5555:5555'
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - app-network
        profiles:
            - dev
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # MinIO Сервис для S3-совместимого хранения
    #---------------------------------------------------------------------------
    minio:
        container_name: minio_storage_chat
        image: minio/minio:latest
        command: server /data --console-address ":9001"
        ports:
            - '${MINIO_API_PORT:-9000}:9000'
            - '${MINIO_CONSOLE_PORT:-9001}:9001'
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
            MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-avatars,media}
        volumes:
            - minio_data:/data
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
            interval: 30s
            timeout: 20s
            retries: 3
        restart: unless-stopped

    #---------------------------------------------------------------------------
    # Nginx Прокси для раздачи статики из MinIO
    #---------------------------------------------------------------------------
    nginx:
        container_name: nginx_proxy_chat
        image: nginx:latest
        volumes:
            - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        ports:
            - '${NGINX_PORT:-8080}:80'
        depends_on:
            - minio
        networks:
            - app-network
        restart: unless-stopped

#---------------------------------------------------------------------------
# Сети и Volumes
#---------------------------------------------------------------------------
networks:
    app-network:
        driver: bridge

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    minio_data:
        driver: local
