model ChatParticipant {
    id       String    @id @default(cuid())
    chatId   String
    userId   String
    joinedAt DateTime  @default(now())
    leftAt   DateTime?
    role     UserRole  @default(USER)

    // Зашифрованный ключ сессии для данного пользователя в данном чате.
    // Ключ шифруется публичным ключом пользователя.
    // Это поле используется для E2E шифрования сообщений в чате.
    // Каждый участник имеет свой зашифрованный ключ сессии,
    // который может быть расшифрован только его приватным ключом.
    encryptedSessionKey String? // Хранится как Base64 строка

    // ID последнего прочитанного сообщения этим участником в этом чате
    // Позволяет отслеживать, какие сообщения были прочитаны каждым участником.
    // Может использоваться для отображения индикатора непрочитанных сообщений.
    lastReadMessageId String?

    // Связи
    // Связь с чатом, к которому принадлежит этот участник
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
    // Связь с пользователем, который является этим участником
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Связь с последним прочитанным сообщением (опционально)
    // Если lastReadMessageId установлен, это поле будет содержать соответствующее сообщение.
    // Это может быть полезно для быстрого доступа к контексту последнего прочтения.
    // Однако, это может усложнить запросы и потенциально создать циклическую зависимость, если не спроектировано аккуратно.
    // В качестве альтернативы, можно просто хранить ID и загружать сообщение по мере необходимости.
    // lastReadMessage Message? @relation("LastReadByParticipant", fields: [lastReadMessageId], references: [id], onDelete: SetNull)
    // @@index([lastReadMessageId]) // Индексировать если часто используется для поиска/фильтрации

    // Комментарии к модели:
    // Модель ChatParticipant представляет собой связующее звено между пользователями и чатами.
    // Она хранит информацию о том, какие пользователи являются участниками каких чатов,
    // а также метаданные, специфичные для участия, такие как время присоединения/выхода, роль,
    // и зашифрованный ключ сессии для E2E шифрования.
    // Поле `lastReadMessageId` важно для функционала "непрочитанных сообщений".

    // Пример использования:
    // - Получить всех участников чата: prisma.chatParticipant.findMany({ where: { chatId: 'some-chat-id' } })
    // - Проверить, является ли пользователь участником чата: prisma.chatParticipant.findUnique({ where: { chatId_userId: { chatId: 'c1', userId: 'u1' } } })
    // - Добавить пользователя в чат: prisma.chatParticipant.create({ data: { chatId: 'c1', userId: 'u2', encryptedSessionKey: '...' } })
    // - Обновить ключ сессии для участника: prisma.chatParticipant.update({ where: { id: 'cp1' }, data: { encryptedSessionKey: 'newKey' } })
    // - Обновить последнее прочитанное сообщение: prisma.chatParticipant.update({ where: { id: 'cp1' }, data: { lastReadMessageId: 'msgNew' } })

    // Уникальный составной индекс для предотвращения дублирования участника в одном чате
    @@unique([chatId, userId])
    @@index([userId])
    @@index([chatId])
}
